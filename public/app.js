// var s = require('../server');
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: " ",
      blog: " ",
      data: []
    };
    this.submit = this.submit.bind(this);
  }

  componentDidMount() {
    $.get("/getData", data => {
      this.setState({
        data: data
      }); // console.log(this.state.data);
    });
  }

  handleChange(e) {
    this.setState({
      [e.target.name]: e.target.value
    }); // console.log(e.target.value);
  }

  submit(e) {
    // e.preventDefault();
    const blogForm = {
      name: this.state.name,
      blog: this.state.blog
    };
    $.ajax({
      url: "/postData",
      method: "POST",
      data: blogForm,
      success: () => {
        console.log("data has been sent to the server.");
      },
      error: err => {
        console.log(err);
      }
    });
  }

  render() {
    return React.createElement("div", {
      id: "mainDiv"
    }, React.createElement("form", {
      onSubmit: this.submit
    }, React.createElement("label", {
      id: "name"
    }, "Name: ", React.createElement("br", null), React.createElement("input", {
      name: "name",
      type: "text",
      value: this.state.name,
      onChange: e => this.handleChange(e)
    })), React.createElement("br", null), React.createElement("br", null), React.createElement("label", {
      id: "blog"
    }, "Blog Topic: ", React.createElement("br", null), React.createElement("textarea", {
      name: "blog",
      type: "text",
      value: this.state.blog,
      onChange: e => this.handleChange(e),
      style: {
        width: "400px",
        height: "80px"
      }
    })), React.createElement("br", null), React.createElement("br", null), React.createElement("button", null, " post ")), React.createElement("div", null, React.createElement("div", null, this.state.data.map((element, i) => React.createElement("div", {
      key: i
    }, React.createElement("div", {
      id: "name"
    }, element.name), React.createElement("div", {
      id: "blog"
    }, element.blog))))));
  }

}

ReactDOM.render(React.createElement(App, null), document.getElementById("reactDiv"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9hcHAuanN4Il0sIm5hbWVzIjpbIkFwcCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwibmFtZSIsImJsb2ciLCJkYXRhIiwic3VibWl0IiwiYmluZCIsImNvbXBvbmVudERpZE1vdW50IiwiJCIsImdldCIsInNldFN0YXRlIiwiaGFuZGxlQ2hhbmdlIiwiZSIsInRhcmdldCIsInZhbHVlIiwiYmxvZ0Zvcm0iLCJhamF4IiwidXJsIiwibWV0aG9kIiwic3VjY2VzcyIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImVyciIsInJlbmRlciIsIndpZHRoIiwiaGVpZ2h0IiwibWFwIiwiZWxlbWVudCIsImkiLCJSZWFjdERPTSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsR0FBTixTQUFrQkMsS0FBSyxDQUFDQyxTQUF4QixDQUFrQztBQUNoQ0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxJQUFJLEVBQUUsR0FESztBQUVYQyxNQUFBQSxJQUFJLEVBQUUsR0FGSztBQUdYQyxNQUFBQSxJQUFJLEVBQUU7QUFISyxLQUFiO0FBS0EsU0FBS0MsTUFBTCxHQUFjLEtBQUtBLE1BQUwsQ0FBWUMsSUFBWixDQUFpQixJQUFqQixDQUFkO0FBQ0Q7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFHO0FBQ2xCQyxJQUFBQSxDQUFDLENBQUNDLEdBQUYsQ0FBTSxVQUFOLEVBQWtCTCxJQUFJLElBQUk7QUFDeEIsV0FBS00sUUFBTCxDQUFjO0FBQUVOLFFBQUFBLElBQUksRUFBRUE7QUFBUixPQUFkLEVBRHdCLENBRXhCO0FBQ0QsS0FIRDtBQUlEOztBQUVETyxFQUFBQSxZQUFZLENBQUNDLENBQUQsRUFBSTtBQUNkLFNBQUtGLFFBQUwsQ0FBYztBQUNaLE9BQUNFLENBQUMsQ0FBQ0MsTUFBRixDQUFTWCxJQUFWLEdBQWlCVSxDQUFDLENBQUNDLE1BQUYsQ0FBU0M7QUFEZCxLQUFkLEVBRGMsQ0FJZDtBQUNEOztBQUVEVCxFQUFBQSxNQUFNLENBQUNPLENBQUQsRUFBSTtBQUNSO0FBQ0EsVUFBTUcsUUFBUSxHQUFHO0FBQ2ZiLE1BQUFBLElBQUksRUFBRSxLQUFLRCxLQUFMLENBQVdDLElBREY7QUFFZkMsTUFBQUEsSUFBSSxFQUFFLEtBQUtGLEtBQUwsQ0FBV0U7QUFGRixLQUFqQjtBQUlBSyxJQUFBQSxDQUFDLENBQUNRLElBQUYsQ0FBTztBQUNMQyxNQUFBQSxHQUFHLEVBQUUsV0FEQTtBQUVMQyxNQUFBQSxNQUFNLEVBQUUsTUFGSDtBQUdMZCxNQUFBQSxJQUFJLEVBQUVXLFFBSEQ7QUFJTEksTUFBQUEsT0FBTyxFQUFFLE1BQU07QUFDYkMsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksbUNBQVo7QUFDRCxPQU5JO0FBT0xDLE1BQUFBLEtBQUssRUFBRUMsR0FBRyxJQUFJO0FBQ1pILFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxHQUFaO0FBQ0Q7QUFUSSxLQUFQO0FBV0Q7O0FBRURDLEVBQUFBLE1BQU0sR0FBRztBQUNQLFdBQ0U7QUFBSyxNQUFBLEVBQUUsRUFBQztBQUFSLE9BQ0U7QUFBTSxNQUFBLFFBQVEsRUFBRSxLQUFLbkI7QUFBckIsT0FDRTtBQUFPLE1BQUEsRUFBRSxFQUFDO0FBQVYsaUJBQ1EsK0JBRFIsRUFFRTtBQUNFLE1BQUEsSUFBSSxFQUFDLE1BRFA7QUFFRSxNQUFBLElBQUksRUFBQyxNQUZQO0FBR0UsTUFBQSxLQUFLLEVBQUUsS0FBS0osS0FBTCxDQUFXQyxJQUhwQjtBQUlFLE1BQUEsUUFBUSxFQUFFVSxDQUFDLElBQUksS0FBS0QsWUFBTCxDQUFrQkMsQ0FBbEI7QUFKakIsTUFGRixDQURGLEVBVUUsK0JBVkYsRUFXRSwrQkFYRixFQVlFO0FBQU8sTUFBQSxFQUFFLEVBQUM7QUFBVix1QkFDYywrQkFEZCxFQUVFO0FBQ0UsTUFBQSxJQUFJLEVBQUMsTUFEUDtBQUVFLE1BQUEsSUFBSSxFQUFDLE1BRlA7QUFHRSxNQUFBLEtBQUssRUFBRSxLQUFLWCxLQUFMLENBQVdFLElBSHBCO0FBSUUsTUFBQSxRQUFRLEVBQUVTLENBQUMsSUFBSSxLQUFLRCxZQUFMLENBQWtCQyxDQUFsQixDQUpqQjtBQUtFLE1BQUEsS0FBSyxFQUFFO0FBQUVhLFFBQUFBLEtBQUssRUFBRSxPQUFUO0FBQWtCQyxRQUFBQSxNQUFNLEVBQUU7QUFBMUI7QUFMVCxNQUZGLENBWkYsRUF1QkUsK0JBdkJGLEVBd0JFLCtCQXhCRixFQXlCRSw2Q0F6QkYsQ0FERixFQThCRSxpQ0FDRSxpQ0FDRyxLQUFLekIsS0FBTCxDQUFXRyxJQUFYLENBQWdCdUIsR0FBaEIsQ0FBb0IsQ0FBQ0MsT0FBRCxFQUFVQyxDQUFWLEtBQ25CO0FBQUssTUFBQSxHQUFHLEVBQUVBO0FBQVYsT0FDRTtBQUFLLE1BQUEsRUFBRSxFQUFDO0FBQVIsT0FBZ0JELE9BQU8sQ0FBQzFCLElBQXhCLENBREYsRUFFRTtBQUFLLE1BQUEsRUFBRSxFQUFDO0FBQVIsT0FBZ0IwQixPQUFPLENBQUN6QixJQUF4QixDQUZGLENBREQsQ0FESCxDQURGLENBOUJGLENBREY7QUEyQ0Q7O0FBeEYrQjs7QUEwRmxDMkIsUUFBUSxDQUFDTixNQUFULENBQWdCLG9CQUFDLEdBQUQsT0FBaEIsRUFBeUJPLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixVQUF4QixDQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHZhciBzID0gcmVxdWlyZSgnLi4vc2VydmVyJyk7XHJcbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIG5hbWU6IFwiIFwiLFxyXG4gICAgICBibG9nOiBcIiBcIixcclxuICAgICAgZGF0YTogW11cclxuICAgIH07XHJcbiAgICB0aGlzLnN1Ym1pdCA9IHRoaXMuc3VibWl0LmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICQuZ2V0KFwiL2dldERhdGFcIiwgZGF0YSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBkYXRhOiBkYXRhIH0pO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnN0YXRlLmRhdGEpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWVcclxuICAgIH0pO1xyXG4gICAgLy8gY29uc29sZS5sb2coZS50YXJnZXQudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgc3VibWl0KGUpIHtcclxuICAgIC8vIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGJsb2dGb3JtID0ge1xyXG4gICAgICBuYW1lOiB0aGlzLnN0YXRlLm5hbWUsXHJcbiAgICAgIGJsb2c6IHRoaXMuc3RhdGUuYmxvZ1xyXG4gICAgfTtcclxuICAgICQuYWpheCh7XHJcbiAgICAgIHVybDogXCIvcG9zdERhdGFcIixcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgZGF0YTogYmxvZ0Zvcm0sXHJcbiAgICAgIHN1Y2Nlc3M6ICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgaGFzIGJlZW4gc2VudCB0byB0aGUgc2VydmVyLlwiKTtcclxuICAgICAgfSxcclxuICAgICAgZXJyb3I6IGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGlkPVwibWFpbkRpdlwiPlxyXG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLnN1Ym1pdH0+XHJcbiAgICAgICAgICA8bGFiZWwgaWQ9XCJuYW1lXCI+XHJcbiAgICAgICAgICAgIE5hbWU6IDxiciAvPlxyXG4gICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICBuYW1lPVwibmFtZVwiXHJcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm5hbWV9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gdGhpcy5oYW5kbGVDaGFuZ2UoZSl9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIDxsYWJlbCBpZD1cImJsb2dcIj5cclxuICAgICAgICAgICAgQmxvZyBUb3BpYzogPGJyIC8+XHJcbiAgICAgICAgICAgIDx0ZXh0YXJlYVxyXG4gICAgICAgICAgICAgIG5hbWU9XCJibG9nXCJcclxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYmxvZ31cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLmhhbmRsZUNoYW5nZShlKX1cclxuICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogXCI0MDBweFwiLCBoZWlnaHQ6IFwiODBweFwiIH19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2xhYmVsPlxyXG5cclxuICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICA8YnV0dG9uPiBwb3N0IDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZm9ybT5cclxuICAgICAgICB7LyogLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gVklFVyBHRVRcclxuICAgICAgICBGUk9NIFNFUlZFUiAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyAqL31cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAge3RoaXMuc3RhdGUuZGF0YS5tYXAoKGVsZW1lbnQsIGkpID0+IChcclxuICAgICAgICAgICAgICA8ZGl2IGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibmFtZVwiPntlbGVtZW50Lm5hbWV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYmxvZ1wiPntlbGVtZW50LmJsb2d9PC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVhY3REaXZcIikpO1xyXG4iXX0=