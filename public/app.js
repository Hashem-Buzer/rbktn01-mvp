// var s = require('../server');
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: " ",
      blog: " ",
      data: []
    };
    this.submit = this.submit.bind(this);
  }

  componentDidMount() {
    $.get("/getData", data => {
      this.setState({
        data: data
      }); // console.log(this.state.data);
    });
  }

  handleChange(e) {
    this.setState({
      [e.target.name]: e.target.value
    }); // console.log(e.target.value);
  }

  submit(e) {
    // e.preventDefault();
    const blogForm = {
      name: this.state.name,
      blog: this.state.blog
    };
    $.ajax({
      url: "/postData",
      method: "POST",
      data: blogForm,
      success: () => {
        console.log("data has been sent to the server.");
      },
      error: err => {
        console.log(err);
      }
    });
  }

  render() {
    return React.createElement("div", {
      id: "mainDiv"
    }, React.createElement("form", {
      id: "form",
      onSubmit: this.submit
    }, React.createElement("label", {
      id: "name"
    }, "Name: ", React.createElement("br", null), React.createElement("input", {
      name: "name",
      type: "text",
      value: this.state.name,
      onChange: e => this.handleChange(e)
    })), React.createElement("br", null), React.createElement("br", null), React.createElement("label", {
      id: "blog"
    }, "Blog Topic: ", React.createElement("br", null), React.createElement("textarea", {
      name: "blog",
      type: "text",
      value: this.state.blog,
      onChange: e => this.handleChange(e),
      style: {
        width: "400px",
        height: "80px"
      }
    })), React.createElement("br", null), React.createElement("br", null), React.createElement("button", null, " post ")), React.createElement("div", null, React.createElement("div", null, this.state.data.map((element, i) => React.createElement("div", {
      id: "blogDiv",
      key: i
    }, React.createElement("div", {
      id: "userName"
    }, "@", element.name), React.createElement("div", {
      id: "userBlog",
      style: {
        textAlign: "center"
      }
    }, React.createElement("br", null), element.blog))))));
  }

}

ReactDOM.render(React.createElement(App, null), document.getElementById("reactDiv"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9hcHAuanN4Il0sIm5hbWVzIjpbIkFwcCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwibmFtZSIsImJsb2ciLCJkYXRhIiwic3VibWl0IiwiYmluZCIsImNvbXBvbmVudERpZE1vdW50IiwiJCIsImdldCIsInNldFN0YXRlIiwiaGFuZGxlQ2hhbmdlIiwiZSIsInRhcmdldCIsInZhbHVlIiwiYmxvZ0Zvcm0iLCJhamF4IiwidXJsIiwibWV0aG9kIiwic3VjY2VzcyIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImVyciIsInJlbmRlciIsIndpZHRoIiwiaGVpZ2h0IiwibWFwIiwiZWxlbWVudCIsImkiLCJ0ZXh0QWxpZ24iLCJSZWFjdERPTSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsR0FBTixTQUFrQkMsS0FBSyxDQUFDQyxTQUF4QixDQUFrQztBQUNoQ0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxJQUFJLEVBQUUsR0FESztBQUVYQyxNQUFBQSxJQUFJLEVBQUUsR0FGSztBQUdYQyxNQUFBQSxJQUFJLEVBQUU7QUFISyxLQUFiO0FBS0EsU0FBS0MsTUFBTCxHQUFjLEtBQUtBLE1BQUwsQ0FBWUMsSUFBWixDQUFpQixJQUFqQixDQUFkO0FBQ0Q7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFHO0FBQ2xCQyxJQUFBQSxDQUFDLENBQUNDLEdBQUYsQ0FBTSxVQUFOLEVBQWtCTCxJQUFJLElBQUk7QUFDeEIsV0FBS00sUUFBTCxDQUFjO0FBQUVOLFFBQUFBLElBQUksRUFBRUE7QUFBUixPQUFkLEVBRHdCLENBRXhCO0FBQ0QsS0FIRDtBQUlEOztBQUVETyxFQUFBQSxZQUFZLENBQUNDLENBQUQsRUFBSTtBQUNkLFNBQUtGLFFBQUwsQ0FBYztBQUNaLE9BQUNFLENBQUMsQ0FBQ0MsTUFBRixDQUFTWCxJQUFWLEdBQWlCVSxDQUFDLENBQUNDLE1BQUYsQ0FBU0M7QUFEZCxLQUFkLEVBRGMsQ0FJZDtBQUNEOztBQUVEVCxFQUFBQSxNQUFNLENBQUNPLENBQUQsRUFBSTtBQUNSO0FBQ0EsVUFBTUcsUUFBUSxHQUFHO0FBQ2ZiLE1BQUFBLElBQUksRUFBRSxLQUFLRCxLQUFMLENBQVdDLElBREY7QUFFZkMsTUFBQUEsSUFBSSxFQUFFLEtBQUtGLEtBQUwsQ0FBV0U7QUFGRixLQUFqQjtBQUlBSyxJQUFBQSxDQUFDLENBQUNRLElBQUYsQ0FBTztBQUNMQyxNQUFBQSxHQUFHLEVBQUUsV0FEQTtBQUVMQyxNQUFBQSxNQUFNLEVBQUUsTUFGSDtBQUdMZCxNQUFBQSxJQUFJLEVBQUVXLFFBSEQ7QUFJTEksTUFBQUEsT0FBTyxFQUFFLE1BQU07QUFDYkMsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksbUNBQVo7QUFDRCxPQU5JO0FBT0xDLE1BQUFBLEtBQUssRUFBRUMsR0FBRyxJQUFJO0FBQ1pILFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxHQUFaO0FBQ0Q7QUFUSSxLQUFQO0FBV0Q7O0FBRURDLEVBQUFBLE1BQU0sR0FBRztBQUNQLFdBQ0U7QUFBSyxNQUFBLEVBQUUsRUFBQztBQUFSLE9BQ0U7QUFBTSxNQUFBLEVBQUUsRUFBQyxNQUFUO0FBQWdCLE1BQUEsUUFBUSxFQUFFLEtBQUtuQjtBQUEvQixPQUNFO0FBQU8sTUFBQSxFQUFFLEVBQUM7QUFBVixpQkFDUSwrQkFEUixFQUVFO0FBQ0UsTUFBQSxJQUFJLEVBQUMsTUFEUDtBQUVFLE1BQUEsSUFBSSxFQUFDLE1BRlA7QUFHRSxNQUFBLEtBQUssRUFBRSxLQUFLSixLQUFMLENBQVdDLElBSHBCO0FBSUUsTUFBQSxRQUFRLEVBQUVVLENBQUMsSUFBSSxLQUFLRCxZQUFMLENBQWtCQyxDQUFsQjtBQUpqQixNQUZGLENBREYsRUFVRSwrQkFWRixFQVdFLCtCQVhGLEVBWUU7QUFBTyxNQUFBLEVBQUUsRUFBQztBQUFWLHVCQUNjLCtCQURkLEVBRUU7QUFDRSxNQUFBLElBQUksRUFBQyxNQURQO0FBRUUsTUFBQSxJQUFJLEVBQUMsTUFGUDtBQUdFLE1BQUEsS0FBSyxFQUFFLEtBQUtYLEtBQUwsQ0FBV0UsSUFIcEI7QUFJRSxNQUFBLFFBQVEsRUFBRVMsQ0FBQyxJQUFJLEtBQUtELFlBQUwsQ0FBa0JDLENBQWxCLENBSmpCO0FBS0UsTUFBQSxLQUFLLEVBQUU7QUFBRWEsUUFBQUEsS0FBSyxFQUFFLE9BQVQ7QUFBa0JDLFFBQUFBLE1BQU0sRUFBRTtBQUExQjtBQUxULE1BRkYsQ0FaRixFQXVCRSwrQkF2QkYsRUF3QkUsK0JBeEJGLEVBeUJFLDZDQXpCRixDQURGLEVBOEJFLGlDQUNFLGlDQUNHLEtBQUt6QixLQUFMLENBQVdHLElBQVgsQ0FBZ0J1QixHQUFoQixDQUFvQixDQUFDQyxPQUFELEVBQVVDLENBQVYsS0FDbkI7QUFBSyxNQUFBLEVBQUUsRUFBQyxTQUFSO0FBQWtCLE1BQUEsR0FBRyxFQUFFQTtBQUF2QixPQUNFO0FBQUssTUFBQSxFQUFFLEVBQUM7QUFBUixZQUFxQkQsT0FBTyxDQUFDMUIsSUFBN0IsQ0FERixFQUVFO0FBQUssTUFBQSxFQUFFLEVBQUMsVUFBUjtBQUFtQixNQUFBLEtBQUssRUFBRTtBQUFFNEIsUUFBQUEsU0FBUyxFQUFFO0FBQWI7QUFBMUIsT0FDRSwrQkFERixFQUVHRixPQUFPLENBQUN6QixJQUZYLENBRkYsQ0FERCxDQURILENBREYsQ0E5QkYsQ0FERjtBQThDRDs7QUEzRitCOztBQTZGbEM0QixRQUFRLENBQUNQLE1BQVQsQ0FBZ0Isb0JBQUMsR0FBRCxPQUFoQixFQUF5QlEsUUFBUSxDQUFDQyxjQUFULENBQXdCLFVBQXhCLENBQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdmFyIHMgPSByZXF1aXJlKCcuLi9zZXJ2ZXInKTtcclxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgbmFtZTogXCIgXCIsXHJcbiAgICAgIGJsb2c6IFwiIFwiLFxyXG4gICAgICBkYXRhOiBbXVxyXG4gICAgfTtcclxuICAgIHRoaXMuc3VibWl0ID0gdGhpcy5zdWJtaXQuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgJC5nZXQoXCIvZ2V0RGF0YVwiLCBkYXRhID0+IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRhdGE6IGRhdGEgfSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUuZGF0YSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgW2UudGFyZ2V0Lm5hbWVdOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgfSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhlLnRhcmdldC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzdWJtaXQoZSkge1xyXG4gICAgLy8gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgYmxvZ0Zvcm0gPSB7XHJcbiAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcclxuICAgICAgYmxvZzogdGhpcy5zdGF0ZS5ibG9nXHJcbiAgICB9O1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgdXJsOiBcIi9wb3N0RGF0YVwiLFxyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBkYXRhOiBibG9nRm9ybSxcclxuICAgICAgc3VjY2VzczogKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBoYXMgYmVlbiBzZW50IHRvIHRoZSBzZXJ2ZXIuXCIpO1xyXG4gICAgICB9LFxyXG4gICAgICBlcnJvcjogZXJyID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgaWQ9XCJtYWluRGl2XCI+XHJcbiAgICAgICAgPGZvcm0gaWQ9XCJmb3JtXCIgb25TdWJtaXQ9e3RoaXMuc3VibWl0fT5cclxuICAgICAgICAgIDxsYWJlbCBpZD1cIm5hbWVcIj5cclxuICAgICAgICAgICAgTmFtZTogPGJyIC8+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcclxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubmFtZX1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLmhhbmRsZUNoYW5nZShlKX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgPGxhYmVsIGlkPVwiYmxvZ1wiPlxyXG4gICAgICAgICAgICBCbG9nIFRvcGljOiA8YnIgLz5cclxuICAgICAgICAgICAgPHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgbmFtZT1cImJsb2dcIlxyXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5ibG9nfVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuaGFuZGxlQ2hhbmdlKGUpfVxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiBcIjQwMHB4XCIsIGhlaWdodDogXCI4MHB4XCIgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvbGFiZWw+XHJcblxyXG4gICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIDxidXR0b24+IHBvc3QgPC9idXR0b24+XHJcbiAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgIHsvKiAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBWSUVXIEdFVFxyXG4gICAgICAgIEZST00gU0VSVkVSIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vICovfVxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5kYXRhLm1hcCgoZWxlbWVudCwgaSkgPT4gKFxyXG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJibG9nRGl2XCIga2V5PXtpfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJ1c2VyTmFtZVwiPkB7ZWxlbWVudC5uYW1lfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cInVzZXJCbG9nXCIgc3R5bGU9e3sgdGV4dEFsaWduOiBcImNlbnRlclwiIH19PlxyXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAge2VsZW1lbnQuYmxvZ31cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApKX1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlYWN0RGl2XCIpKTtcclxuIl19